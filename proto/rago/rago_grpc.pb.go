// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/rago/rago.proto

package rago

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RAGService_IngestDocument_FullMethodName       = "/rago.v1.RAGService/IngestDocument"
	RAGService_BatchIngestDocuments_FullMethodName = "/rago.v1.RAGService/BatchIngestDocuments"
	RAGService_Query_FullMethodName                = "/rago.v1.RAGService/Query"
	RAGService_StreamQuery_FullMethodName          = "/rago.v1.RAGService/StreamQuery"
	RAGService_GetDocument_FullMethodName          = "/rago.v1.RAGService/GetDocument"
	RAGService_ListDocuments_FullMethodName        = "/rago.v1.RAGService/ListDocuments"
	RAGService_DeleteDocument_FullMethodName       = "/rago.v1.RAGService/DeleteDocument"
	RAGService_GetStatistics_FullMethodName        = "/rago.v1.RAGService/GetStatistics"
	RAGService_HealthCheck_FullMethodName          = "/rago.v1.RAGService/HealthCheck"
)

// RAGServiceClient is the client API for RAGService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RAGService provides gRPC interface for RAG operations
type RAGServiceClient interface {
	// Ingest a document into the RAG system
	IngestDocument(ctx context.Context, in *IngestDocumentRequest, opts ...grpc.CallOption) (*IngestDocumentResponse, error)
	// Ingest documents in batch
	BatchIngestDocuments(ctx context.Context, in *BatchIngestDocumentsRequest, opts ...grpc.CallOption) (*BatchIngestDocumentsResponse, error)
	// Query the RAG system
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Stream query results for real-time responses
	StreamQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamQueryResponse], error)
	// Get document by ID
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	// List documents
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error)
	// Delete document
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error)
	// Get system statistics
	GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type rAGServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRAGServiceClient(cc grpc.ClientConnInterface) RAGServiceClient {
	return &rAGServiceClient{cc}
}

func (c *rAGServiceClient) IngestDocument(ctx context.Context, in *IngestDocumentRequest, opts ...grpc.CallOption) (*IngestDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestDocumentResponse)
	err := c.cc.Invoke(ctx, RAGService_IngestDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAGServiceClient) BatchIngestDocuments(ctx context.Context, in *BatchIngestDocumentsRequest, opts ...grpc.CallOption) (*BatchIngestDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchIngestDocumentsResponse)
	err := c.cc.Invoke(ctx, RAGService_BatchIngestDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAGServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, RAGService_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAGServiceClient) StreamQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamQueryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RAGService_ServiceDesc.Streams[0], RAGService_StreamQuery_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryRequest, StreamQueryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RAGService_StreamQueryClient = grpc.ServerStreamingClient[StreamQueryResponse]

func (c *rAGServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, RAGService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAGServiceClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDocumentsResponse)
	err := c.cc.Invoke(ctx, RAGService_ListDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAGServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDocumentResponse)
	err := c.cc.Invoke(ctx, RAGService_DeleteDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAGServiceClient) GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatisticsResponse)
	err := c.cc.Invoke(ctx, RAGService_GetStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAGServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, RAGService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RAGServiceServer is the server API for RAGService service.
// All implementations must embed UnimplementedRAGServiceServer
// for forward compatibility.
//
// RAGService provides gRPC interface for RAG operations
type RAGServiceServer interface {
	// Ingest a document into the RAG system
	IngestDocument(context.Context, *IngestDocumentRequest) (*IngestDocumentResponse, error)
	// Ingest documents in batch
	BatchIngestDocuments(context.Context, *BatchIngestDocumentsRequest) (*BatchIngestDocumentsResponse, error)
	// Query the RAG system
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// Stream query results for real-time responses
	StreamQuery(*QueryRequest, grpc.ServerStreamingServer[StreamQueryResponse]) error
	// Get document by ID
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	// List documents
	ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error)
	// Delete document
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error)
	// Get system statistics
	GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error)
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedRAGServiceServer()
}

// UnimplementedRAGServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRAGServiceServer struct{}

func (UnimplementedRAGServiceServer) IngestDocument(context.Context, *IngestDocumentRequest) (*IngestDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestDocument not implemented")
}
func (UnimplementedRAGServiceServer) BatchIngestDocuments(context.Context, *BatchIngestDocumentsRequest) (*BatchIngestDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchIngestDocuments not implemented")
}
func (UnimplementedRAGServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedRAGServiceServer) StreamQuery(*QueryRequest, grpc.ServerStreamingServer[StreamQueryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamQuery not implemented")
}
func (UnimplementedRAGServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedRAGServiceServer) ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedRAGServiceServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedRAGServiceServer) GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedRAGServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedRAGServiceServer) mustEmbedUnimplementedRAGServiceServer() {}
func (UnimplementedRAGServiceServer) testEmbeddedByValue()                    {}

// UnsafeRAGServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RAGServiceServer will
// result in compilation errors.
type UnsafeRAGServiceServer interface {
	mustEmbedUnimplementedRAGServiceServer()
}

func RegisterRAGServiceServer(s grpc.ServiceRegistrar, srv RAGServiceServer) {
	// If the following call pancis, it indicates UnimplementedRAGServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RAGService_ServiceDesc, srv)
}

func _RAGService_IngestDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).IngestDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_IngestDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).IngestDocument(ctx, req.(*IngestDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAGService_BatchIngestDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchIngestDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).BatchIngestDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_BatchIngestDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).BatchIngestDocuments(ctx, req.(*BatchIngestDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAGService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAGService_StreamQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RAGServiceServer).StreamQuery(m, &grpc.GenericServerStream[QueryRequest, StreamQueryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RAGService_StreamQueryServer = grpc.ServerStreamingServer[StreamQueryResponse]

func _RAGService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAGService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_ListDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).ListDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAGService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAGService_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_GetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).GetStatistics(ctx, req.(*GetStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAGService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RAGService_ServiceDesc is the grpc.ServiceDesc for RAGService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RAGService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rago.v1.RAGService",
	HandlerType: (*RAGServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestDocument",
			Handler:    _RAGService_IngestDocument_Handler,
		},
		{
			MethodName: "BatchIngestDocuments",
			Handler:    _RAGService_BatchIngestDocuments_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _RAGService_Query_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _RAGService_GetDocument_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _RAGService_ListDocuments_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _RAGService_DeleteDocument_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _RAGService_GetStatistics_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _RAGService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamQuery",
			Handler:       _RAGService_StreamQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/rago/rago.proto",
}

const (
	LLMService_Generate_FullMethodName          = "/rago.v1.LLMService/Generate"
	LLMService_StreamGenerate_FullMethodName    = "/rago.v1.LLMService/StreamGenerate"
	LLMService_GenerateWithTools_FullMethodName = "/rago.v1.LLMService/GenerateWithTools"
	LLMService_ExtractMetadata_FullMethodName   = "/rago.v1.LLMService/ExtractMetadata"
	LLMService_ListModels_FullMethodName        = "/rago.v1.LLMService/ListModels"
)

// LLMServiceClient is the client API for LLMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LLMService provides gRPC interface for LLM operations
type LLMServiceClient interface {
	// Generate text using LLM
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
	// Stream generation for real-time text generation
	StreamGenerate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamGenerateResponse], error)
	// Generate with tools
	GenerateWithTools(ctx context.Context, in *GenerateWithToolsRequest, opts ...grpc.CallOption) (*GenerateWithToolsResponse, error)
	// Extract metadata from content
	ExtractMetadata(ctx context.Context, in *ExtractMetadataRequest, opts ...grpc.CallOption) (*ExtractMetadataResponse, error)
	// Get available models
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
}

type lLMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMServiceClient(cc grpc.ClientConnInterface) LLMServiceClient {
	return &lLMServiceClient{cc}
}

func (c *lLMServiceClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, LLMService_Generate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMServiceClient) StreamGenerate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamGenerateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LLMService_ServiceDesc.Streams[0], LLMService_StreamGenerate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GenerateRequest, StreamGenerateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMService_StreamGenerateClient = grpc.ServerStreamingClient[StreamGenerateResponse]

func (c *lLMServiceClient) GenerateWithTools(ctx context.Context, in *GenerateWithToolsRequest, opts ...grpc.CallOption) (*GenerateWithToolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateWithToolsResponse)
	err := c.cc.Invoke(ctx, LLMService_GenerateWithTools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMServiceClient) ExtractMetadata(ctx context.Context, in *ExtractMetadataRequest, opts ...grpc.CallOption) (*ExtractMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractMetadataResponse)
	err := c.cc.Invoke(ctx, LLMService_ExtractMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, LLMService_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LLMServiceServer is the server API for LLMService service.
// All implementations must embed UnimplementedLLMServiceServer
// for forward compatibility.
//
// LLMService provides gRPC interface for LLM operations
type LLMServiceServer interface {
	// Generate text using LLM
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	// Stream generation for real-time text generation
	StreamGenerate(*GenerateRequest, grpc.ServerStreamingServer[StreamGenerateResponse]) error
	// Generate with tools
	GenerateWithTools(context.Context, *GenerateWithToolsRequest) (*GenerateWithToolsResponse, error)
	// Extract metadata from content
	ExtractMetadata(context.Context, *ExtractMetadataRequest) (*ExtractMetadataResponse, error)
	// Get available models
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	mustEmbedUnimplementedLLMServiceServer()
}

// UnimplementedLLMServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLLMServiceServer struct{}

func (UnimplementedLLMServiceServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedLLMServiceServer) StreamGenerate(*GenerateRequest, grpc.ServerStreamingServer[StreamGenerateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGenerate not implemented")
}
func (UnimplementedLLMServiceServer) GenerateWithTools(context.Context, *GenerateWithToolsRequest) (*GenerateWithToolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWithTools not implemented")
}
func (UnimplementedLLMServiceServer) ExtractMetadata(context.Context, *ExtractMetadataRequest) (*ExtractMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractMetadata not implemented")
}
func (UnimplementedLLMServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedLLMServiceServer) mustEmbedUnimplementedLLMServiceServer() {}
func (UnimplementedLLMServiceServer) testEmbeddedByValue()                    {}

// UnsafeLLMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMServiceServer will
// result in compilation errors.
type UnsafeLLMServiceServer interface {
	mustEmbedUnimplementedLLMServiceServer()
}

func RegisterLLMServiceServer(s grpc.ServiceRegistrar, srv LLMServiceServer) {
	// If the following call pancis, it indicates UnimplementedLLMServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LLMService_ServiceDesc, srv)
}

func _LLMService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMService_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServiceServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMService_StreamGenerate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LLMServiceServer).StreamGenerate(m, &grpc.GenericServerStream[GenerateRequest, StreamGenerateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMService_StreamGenerateServer = grpc.ServerStreamingServer[StreamGenerateResponse]

func _LLMService_GenerateWithTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateWithToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServiceServer).GenerateWithTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMService_GenerateWithTools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServiceServer).GenerateWithTools(ctx, req.(*GenerateWithToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMService_ExtractMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServiceServer).ExtractMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMService_ExtractMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServiceServer).ExtractMetadata(ctx, req.(*ExtractMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LLMService_ServiceDesc is the grpc.ServiceDesc for LLMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rago.v1.LLMService",
	HandlerType: (*LLMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _LLMService_Generate_Handler,
		},
		{
			MethodName: "GenerateWithTools",
			Handler:    _LLMService_GenerateWithTools_Handler,
		},
		{
			MethodName: "ExtractMetadata",
			Handler:    _LLMService_ExtractMetadata_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _LLMService_ListModels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGenerate",
			Handler:       _LLMService_StreamGenerate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/rago/rago.proto",
}

const (
	EmbeddingService_GenerateEmbedding_FullMethodName       = "/rago.v1.EmbeddingService/GenerateEmbedding"
	EmbeddingService_BatchGenerateEmbeddings_FullMethodName = "/rago.v1.EmbeddingService/BatchGenerateEmbeddings"
	EmbeddingService_ComputeSimilarity_FullMethodName       = "/rago.v1.EmbeddingService/ComputeSimilarity"
)

// EmbeddingServiceClient is the client API for EmbeddingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EmbeddingService provides gRPC interface for embedding operations
type EmbeddingServiceClient interface {
	// Generate embeddings for text
	GenerateEmbedding(ctx context.Context, in *GenerateEmbeddingRequest, opts ...grpc.CallOption) (*GenerateEmbeddingResponse, error)
	// Batch generate embeddings
	BatchGenerateEmbeddings(ctx context.Context, in *BatchGenerateEmbeddingsRequest, opts ...grpc.CallOption) (*BatchGenerateEmbeddingsResponse, error)
	// Compute similarity between two texts
	ComputeSimilarity(ctx context.Context, in *ComputeSimilarityRequest, opts ...grpc.CallOption) (*ComputeSimilarityResponse, error)
}

type embeddingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbeddingServiceClient(cc grpc.ClientConnInterface) EmbeddingServiceClient {
	return &embeddingServiceClient{cc}
}

func (c *embeddingServiceClient) GenerateEmbedding(ctx context.Context, in *GenerateEmbeddingRequest, opts ...grpc.CallOption) (*GenerateEmbeddingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateEmbeddingResponse)
	err := c.cc.Invoke(ctx, EmbeddingService_GenerateEmbedding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingServiceClient) BatchGenerateEmbeddings(ctx context.Context, in *BatchGenerateEmbeddingsRequest, opts ...grpc.CallOption) (*BatchGenerateEmbeddingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGenerateEmbeddingsResponse)
	err := c.cc.Invoke(ctx, EmbeddingService_BatchGenerateEmbeddings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingServiceClient) ComputeSimilarity(ctx context.Context, in *ComputeSimilarityRequest, opts ...grpc.CallOption) (*ComputeSimilarityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComputeSimilarityResponse)
	err := c.cc.Invoke(ctx, EmbeddingService_ComputeSimilarity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbeddingServiceServer is the server API for EmbeddingService service.
// All implementations must embed UnimplementedEmbeddingServiceServer
// for forward compatibility.
//
// EmbeddingService provides gRPC interface for embedding operations
type EmbeddingServiceServer interface {
	// Generate embeddings for text
	GenerateEmbedding(context.Context, *GenerateEmbeddingRequest) (*GenerateEmbeddingResponse, error)
	// Batch generate embeddings
	BatchGenerateEmbeddings(context.Context, *BatchGenerateEmbeddingsRequest) (*BatchGenerateEmbeddingsResponse, error)
	// Compute similarity between two texts
	ComputeSimilarity(context.Context, *ComputeSimilarityRequest) (*ComputeSimilarityResponse, error)
	mustEmbedUnimplementedEmbeddingServiceServer()
}

// UnimplementedEmbeddingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmbeddingServiceServer struct{}

func (UnimplementedEmbeddingServiceServer) GenerateEmbedding(context.Context, *GenerateEmbeddingRequest) (*GenerateEmbeddingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEmbedding not implemented")
}
func (UnimplementedEmbeddingServiceServer) BatchGenerateEmbeddings(context.Context, *BatchGenerateEmbeddingsRequest) (*BatchGenerateEmbeddingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGenerateEmbeddings not implemented")
}
func (UnimplementedEmbeddingServiceServer) ComputeSimilarity(context.Context, *ComputeSimilarityRequest) (*ComputeSimilarityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeSimilarity not implemented")
}
func (UnimplementedEmbeddingServiceServer) mustEmbedUnimplementedEmbeddingServiceServer() {}
func (UnimplementedEmbeddingServiceServer) testEmbeddedByValue()                          {}

// UnsafeEmbeddingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbeddingServiceServer will
// result in compilation errors.
type UnsafeEmbeddingServiceServer interface {
	mustEmbedUnimplementedEmbeddingServiceServer()
}

func RegisterEmbeddingServiceServer(s grpc.ServiceRegistrar, srv EmbeddingServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmbeddingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmbeddingService_ServiceDesc, srv)
}

func _EmbeddingService_GenerateEmbedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateEmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServiceServer).GenerateEmbedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmbeddingService_GenerateEmbedding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServiceServer).GenerateEmbedding(ctx, req.(*GenerateEmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmbeddingService_BatchGenerateEmbeddings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGenerateEmbeddingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServiceServer).BatchGenerateEmbeddings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmbeddingService_BatchGenerateEmbeddings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServiceServer).BatchGenerateEmbeddings(ctx, req.(*BatchGenerateEmbeddingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmbeddingService_ComputeSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeSimilarityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServiceServer).ComputeSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmbeddingService_ComputeSimilarity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServiceServer).ComputeSimilarity(ctx, req.(*ComputeSimilarityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmbeddingService_ServiceDesc is the grpc.ServiceDesc for EmbeddingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmbeddingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rago.v1.EmbeddingService",
	HandlerType: (*EmbeddingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateEmbedding",
			Handler:    _EmbeddingService_GenerateEmbedding_Handler,
		},
		{
			MethodName: "BatchGenerateEmbeddings",
			Handler:    _EmbeddingService_BatchGenerateEmbeddings_Handler,
		},
		{
			MethodName: "ComputeSimilarity",
			Handler:    _EmbeddingService_ComputeSimilarity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rago/rago.proto",
}
