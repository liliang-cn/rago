# Rago Configuration Example with MCP Support
[server]
port = 7127
host = "0.0.0.0"
enable_ui = true
cors_origins = ["*"]

[providers]
default_llm = "ollama"
default_embedder = "ollama"

[providers.ollama]
type = "ollama"
base_url = "http://localhost:11434"
embedding_model = "nomic-embed-text"
llm_model = "qwen2.5"
timeout = "30s"

[sqvect]
db_path = "./data/rag.db"
max_conns = 10
batch_size = 100
top_k = 5
threshold = 0.0

[keyword]
index_path = "./data/keyword.bleve"

[chunker]
chunk_size = 300
overlap = 50
method = "sentence"

[ingest]
[ingest.metadata_extraction]
enable = false
# llm_model will be auto-configured from default provider

[tools]
enabled = true
max_concurrent_calls = 5
call_timeout = "30s"
security_level = "normal"
log_level = "info"
enabled_tools = ["datetime", "http", "file_operation", "rag_search", "sql_query"]

[tools.rate_limit]
calls_per_minute = 60
calls_per_hour = 1000
burst_size = 10

[tools.builtin]
datetime = { enabled = true, timezone = "UTC" }
http = { enabled = true, timeout = "30s", max_redirects = 5 }
file_operation = { enabled = true, base_path = "./workspace", max_file_size = "10MB" }
rag_search = { enabled = true, max_results = 10 }
sql_query = { enabled = true, databases = ["./data/rag.db"] }

[tools.plugins]
enabled = false
plugin_paths = ["./plugins"]
auto_load = false

# ==============================================
# MCP (Model Context Protocol) Configuration
# ==============================================
[mcp]
enabled = true
log_level = "info"
default_timeout = "30s"
max_concurrent_requests = 10
health_check_interval = "60s"

# SQLite MCP Server - Database operations
[[mcp.servers]]
name = "sqlite"
description = "SQLite database operations"
command = ["mcp-sqlite-server"]
args = ["--allowed-dir", "./data"]
working_dir = "./data"
env = { DEBUG = "mcp:*" }
auto_start = true
restart_on_failure = true
max_restarts = 5
restart_delay = "5s"
capabilities = ["query", "execute", "list", "create", "drop"]

# Filesystem MCP Server - File operations
[[mcp.servers]]
name = "filesystem"
description = "File system operations"
command = ["npx", "@modelcontextprotocol/server-filesystem"]
args = ["--root", "./workspace"]
working_dir = "./workspace"
env = { NODE_ENV = "production" }
auto_start = false
restart_on_failure = true
max_restarts = 3
restart_delay = "10s"
capabilities = ["read", "write", "list", "delete"]

# Git MCP Server - Version control operations
[[mcp.servers]]
name = "git"
description = "Git version control operations"
command = ["npx", "@modelcontextprotocol/server-git"]
args = ["--repository", "."]
working_dir = "."
auto_start = false
restart_on_failure = true
max_restarts = 3
restart_delay = "10s"
capabilities = ["status", "log", "diff", "commit"]

# Web Search MCP Server - Internet search capabilities
[[mcp.servers]]
name = "brave-search"
description = "Web search using Brave Search API"
command = ["npx", "@modelcontextprotocol/server-brave-search"]
args = []
env = { BRAVE_API_KEY = "${BRAVE_API_KEY}" }
auto_start = false
restart_on_failure = true
max_restarts = 3
restart_delay = "15s"
capabilities = ["search", "news"]

# HTTP Fetch MCP Server - HTTP requests
[[mcp.servers]]
name = "fetch"
description = "HTTP request operations"
command = ["npx", "@modelcontextprotocol/server-fetch"]
args = []
auto_start = false
restart_on_failure = true
max_restarts = 3
restart_delay = "5s"
capabilities = ["get", "post", "put", "delete"]